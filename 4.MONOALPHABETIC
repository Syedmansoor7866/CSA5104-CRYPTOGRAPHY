#include <stdio.h>
#include <string.h>

void monoalphabeticSubstitution(char plaintext[], char key[]) {
    int i;
    char ciphertext[100]; 
    for (i = 0; i < strlen(plaintext); i++) {
        if (plaintext[i] >= 'A' && plaintext[i] <= 'Z') {
            ciphertext[i] = key[plaintext[i] - 'A'];
        } else if (plaintext[i] >= 'a' && plaintext[i] <= 'z') {
            ciphertext[i] = key[plaintext[i] - 'a'] + 'a' - 'A';
        } else {
            ciphertext[i] = plaintext[i];
        }
    }

    ciphertext[i] = '\0';

    printf("Ciphertext: %s\n", ciphertext);
}

int main() {
    char plaintext[100];
    char key[26];

    printf("Enter the plaintext message: ");
    scanf("%[^\n]", plaintext);

    printf("Enter the substitution key (26 characters in any order, no spaces or duplicates): ");
    scanf("%s", key);

    if (strlen(key) != 26) {
        printf("Invalid key length. The key must contain 26 characters.\n");
        return 1;
    }

    int used[26] = {0}; 

    for (int i = 0; i < 26; i++) {
        if (key[i] < 'A' || (key[i] > 'Z' && key[i] < 'a') || key[i] > 'z') {
            printf("Invalid key character: %c\n", key[i]);
            return 1;
        }

        int index = (key[i] >= 'a') ? (key[i] - 'a') : (key[i] - 'A');
        if (used[index]) {
            printf("Duplicate key character: %c\n", key[i]);
            return 1;
        }
        used[index] = 1;
    }

    monoalphabeticSubstitution(plaintext, key);

    return 0;
}
